# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from base_service import BaseService
from transformers import AutoModelForCausalLM, AutoTokenizer, DataCollatorForLanguageModeling, TextDataset, Trainer, TrainingArguments
from typing import Any
from typing_extensions import Self
import os
import sys
import tempfile
import threading
import uuid

TRANSFORMERS_AVAILABLE = True
TRANSFORMERS_AVAILABLE = False
class AITrainingService(BaseService):
    def __init__(self: Self, kernel: Any, service_id: str) -> None: ...
    def start_fine_tuning_job(self: Self, base_model_id: str, dataset_name: str, new_model_name: str, training_args: dict) -> Any: ...
    def get_job_status(self: Self, job_id: str) -> Any: ...
    def _training_worker(self: Self, job_id: Any, base_model_id: Any, dataset_name: Any, new_model_name: Any, training_args: Any) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import os
import threading
import uuid
import sys
import tempfile
import transformers
import transformers.AutoTokenizer
import transformers.AutoModelForCausalLM
import transformers.Trainer
import transformers.TrainingArguments
import transformers.TextDataset
import transformers.DataCollatorForLanguageModeling
import ntpath