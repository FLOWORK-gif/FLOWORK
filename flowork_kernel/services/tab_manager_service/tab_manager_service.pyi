# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from flowork_kernel.api_client import ApiClient
from flowork_kernel.api_contract import BaseUIProvider
from flowork_kernel.services.base_service import BaseService
from flowork_kernel.ui_shell.workflow_editor_tab import WorkflowEditorTab
from flowork_kernel.utils.performance_logger import log_performance
from typing import Any
from typing_extensions import Self
import threading
import uuid

class TabManagerService(BaseService):
    def __init__(self: Self, kernel: Any, service_id: str) -> None: ...
    def start(self: Self) -> Any: ...
    def set_ui_handles(self: Self, main_window: Any, notebook_widget: Any) -> Any: ...
    def find_workflow_for_node(self: Self, target_node_id: str) -> Any: ...
    def _on_tab_selected(self: Self, event: Any) -> Any: ...
    def _populate_managed_tabs(self: Self) -> Any: ...
    def load_session_state(self: Self) -> Any: ...
    def add_new_workflow_tab(self: Self, is_default: Any) -> Any: ...
    def open_managed_tab(self: Self, tab_key: Any, select_it: Any) -> Any: ...
    def _create_and_add_tab(self: Self, frame_class: Any, title: Any, tab_id: Any, set_as_main: Any, is_new_tab: Any, tab_key: Any) -> Any: ...
    def close_tab(self: Self, tab_id_str: Any) -> Any: ...
    def save_session_state(self: Self) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import uuid
import flowork_kernel
import flowork_kernel.services
import flowork_kernel.services.base_service
import flowork_kernel.ui_shell
import flowork_kernel.ui_shell.workflow_editor_tab
import flowork_kernel.api_contract
import flowork_kernel.api_client
import threading
import flowork_kernel.utils
import flowork_kernel.utils.performance_logger