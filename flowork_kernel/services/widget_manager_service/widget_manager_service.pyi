# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from base_service import BaseService
from importlib.machinery import ExtensionFileLoader
from typing import Any
from typing_extensions import Self
import hashlib
import importlib.metadata
import importlib.util
import json
import os
import shutil
import subprocess
import sys
import tempfile
import zipfile

class WidgetManagerService(BaseService):
    def __init__(self: Self, kernel: Any, service_id: str) -> None: ...
    def _is_cache_valid(self: Self) -> Any: ...
    def discover_and_load_widgets(self: Self) -> Any: ...
    def _process_single_widget(self: Self, widget_dir: Any, widget_id: Any, paused_ids: Any, manifest_override: Any) -> Any: ...
    def _calculate_requirements_hash(self: Self, file_path: Any) -> Any: ...
    def _install_dependencies_locally(self: Self, component_path: Any, component_name: Any) -> Any: ...
    def _load_paused_status(self: Self) -> Any: ...
    def _save_paused_status(self: Self) -> Any: ...
    def set_widget_paused(self: Self, widget_id: Any, is_paused: Any) -> Any: ...
    def install_component(self: Self, zip_filepath: str) -> (bool, str): ...
    def uninstall_component(self: Self, component_id: str) -> (bool, str): ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import os
import json
import importlib
import importlib.util
import subprocess
import sys
import importlib.machinery
import importlib.metadata
import zipfile
import tempfile
import shutil
import hashlib
import ntpath