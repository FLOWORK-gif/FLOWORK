# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from base_service import BaseService
from cryptography.exceptions import InvalidSignature
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import padding
from flowork_kernel.api_client import ApiClient
from flowork_kernel.exceptions import SignatureVerificationError
from flowork_kernel.kernel import Kernel
from tkinter import messagebox
from typing import Any, TYPE_CHECKING
from typing_extensions import Self
import base64
import datetime
import hashlib
import json
import os
import platform
import requests
import shutil
import time
import uuid

CRYPTO_AVAILABLE = True
CRYPTO_AVAILABLE = False
class LicenseManagerService(BaseService):
    def __init__(self: Self, kernel: 'Kernel', service_id: str) -> None: ...
    def _fetch_remote_tier_config(self: Self) -> Any: ...
    def verify_license_on_startup(self: Self) -> Any: ...
    def _load_public_keys(self: Self) -> Any: ...
    def _get_machine_id(self: Self) -> str: ...
    def _get_license_file_path(self: Self) -> Any: ...
    def _verify_local_license_file(self: Self) -> Any: ...
    def validate_local_license_online(self: Self, license_key: str, machine_id: str) -> (bool, str): ...
    def activate_license_on_server(self: Self, full_license_content: dict) -> Any: ...
    def deactivate_license_on_server(self: Self) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import os
import json
import base64
import uuid
import platform
import hashlib
import time
import datetime
import requests
import shutil
import tkinter
import tkinter.messagebox
import flowork_kernel
import flowork_kernel.exceptions
import flowork_kernel.api_client
import cryptography
import cryptography.hazmat
import cryptography.hazmat.primitives
import cryptography.hazmat.primitives.hashes
import cryptography.hazmat.primitives.serialization
import cryptography.hazmat.primitives.asymmetric
import cryptography.hazmat.primitives.asymmetric.padding
import cryptography.exceptions
import ntpath