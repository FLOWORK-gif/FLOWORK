# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from flowork_kernel.exceptions import PermissionDeniedError
from packaging import version
from typing import Any, Callable, Dict, List
from typing_extensions import Self
from dataclasses import dataclass
import datetime
import importlib
import json
import logging
import os
import queue
import requests
import sys
import threading
import time
import webbrowser

class ServiceWorkflowProxy:
    def __init__(self: Self, kernel: Any, service_id: Any, preset_path: Any) -> None: ...
    def _load_workflow_definition(self: Self) -> Any: ...
    def reload_definition(self: Self) -> Any: ...
    def __getattr__(self: Self, name: Any) -> Any: ...

@dataclass
class Kernel:
    class FileSystemProxy:
        def __init__(self: Self, kernel: Any) -> None: ...
        def _check_permission(self: Self, caller_module_id: str, required_permission: str) -> Any: ...
        def read(self: Self, file_path: Any, mode: Any, encoding: Any, caller_module_id: str) -> Any: ...
        def write(self: Self, file_path: Any, data: Any, mode: Any, encoding: Any, caller_module_id: str) -> Any: ...
        def exists(self: Self, path: Any, caller_module_id: str) -> Any: ...
        def remove(self: Self, path: Any, caller_module_id: str) -> Any: ...
        def rmtree(self: Self, path: Any, caller_module_id: str) -> Any: ...
    class NetworkProxy:
        def __init__(self: Self, kernel: Any) -> None: ...
        def _check_permission(self: Self, caller_module_id: str, required_permission: str) -> Any: ...
        def get(self: Self, url: Any, caller_module_id: str) -> Any: ...
        def post(self: Self, url: Any, caller_module_id: str) -> Any: ...

    def __init__(self: Self, project_root_path: str) -> None: ...
    def _validate_dev_mode(self: Self) -> bool: ...
    def ai_manager(self: Self) -> Any: ...
    def loc(self: Self) -> Any: ...
    def event_bus(self: Self) -> Any: ...
    def register_ui_service(self: Self, service_id: str, instance: object) -> Any: ...
    def _log_queue_worker(self: Self) -> Any: ...
    def _load_services_from_manifest(self: Self) -> Any: ...
    def _load_service(self: Self, service_config: Dict[str, str]) -> Any: ...
    def get_service(self: Self, service_id: str, is_system_call: bool) -> Any: ...
    def start_all_services(self: Self) -> Any: ...
    def finalize_startup(self: Self) -> Any: ...
    def hot_reload_components(self: Self) -> Any: ...
    def stop_all_services(self: Self) -> Any: ...
    def is_premium_user(self: Self) -> bool: ...
    def is_monetization_active(self: Self) -> bool: ...
    def is_tier_sufficient(self: Self, required_tier: str) -> bool: ...
    def activate_license_online(self: Self, full_license_content: dict) -> Any: ...
    def deactivate_license_online(self: Self) -> Any: ...
    def register_log_viewer(self: Self, tab_id: str, log_viewer_instance: Any) -> Any: ...
    def unregister_log_viewer(self: Self, tab_id: str) -> Any: ...
    def set_root(self: Self, root_window: Any) -> Any: ...
    def _setup_file_logger(self: Self) -> Any: ...
    def write_to_log(self: Self, message: Any, level: Any) -> Any: ...
    def display_approval_popup(self: Self, module_id: str, message: str, callback_func: Callable) -> Any: ...
    def display_permission_denied_popup(self: Self, message: str) -> Any: ...
    def trigger_workflow_from_node(self: Self, target_node_id: str, payload: dict) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import os
import sys
import json
import time
import logging
import threading
import queue
import webbrowser
import importlib
import datetime
import typing
import requests
import packaging
import packaging.version
import flowork_kernel
import flowork_kernel.exceptions
import shutil
import ntpath