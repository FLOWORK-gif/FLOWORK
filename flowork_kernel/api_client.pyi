# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from flowork_kernel.kernel import Kernel
from typing import Any
from typing_extensions import Self
import json
import os
import random
import requests
import threading
import time

class ApiClient:
    def __init__(self: Self, base_url: Any, kernel: Any) -> None: ...
    def _get_local_auth_headers(self: Self) -> Any: ...
    def _get_supabase_headers(self: Self, auth_token: Any) -> Any: ...
    def register_user(self: Self, username: Any, email: Any, password: Any) -> Any: ...
    def forgot_password(self: Self, email: str) -> Any: ...
    def login_user(self: Self, email: Any, password: Any) -> Any: ...
    def get_user_profile_by_token(self: Self, session_token: str) -> Any: ...
    def validate_license_activation(self: Self, license_key: str, machine_id: str) -> Any: ...
    def activate_license(self: Self, license_content: dict) -> Any: ...
    def deactivate_license(self: Self) -> Any: ...
    def restart_application(self: Self) -> Any: ...
    def _handle_response(self: Self, response: Any) -> Any: ...
    def get_all_settings(self: Self) -> Any: ...
    def save_settings(self: Self, settings_data: dict) -> Any: ...
    def list_datasets(self: Self) -> Any: ...
    def get_dataset_data(self: Self, dataset_name: str) -> Any: ...
    def create_dataset(self: Self, name: str) -> Any: ...
    def add_data_to_dataset(self: Self, dataset_name: str, data_list: list) -> Any: ...
    def start_training_job(self: Self, base_model_id: Any, dataset_name: Any, new_model_name: Any, training_args: Any) -> Any: ...
    def get_training_job_status(self: Self, job_id: str) -> Any: ...
    def start_model_conversion(self: Self, source_model_folder: str, output_gguf_name: str, quantize_method: str) -> Any: ...
    def start_model_requantize(self: Self, source_gguf_path: str, output_gguf_name: str, quantize_method: str) -> Any: ...
    def get_conversion_status(self: Self, job_id: str) -> Any: ...
    def get_agents(self: Self) -> Any: ...
    def save_agent(self: Self, agent_data: dict) -> Any: ...
    def delete_agent(self: Self, agent_id: str) -> Any: ...
    def run_agent(self: Self, agent_id: str, objective: str) -> Any: ...
    def get_agent_run_status(self: Self, run_id: str) -> Any: ...
    def stop_agent_run(self: Self, run_id: str) -> Any: ...
    def get_marketplace_ads(self: Self) -> Any: ...
    def get_marketplace_index(self: Self, component_type: str) -> Any: ...
    def trigger_hot_reload(self: Self) -> Any: ...
    def get_presets(self: Self) -> Any: ...
    def get_preset_data(self: Self, preset_name: Any) -> Any: ...
    def save_preset(self: Self, preset_name: Any, workflow_data: Any) -> Any: ...
    def delete_preset(self: Self, preset_name: Any) -> Any: ...
    def get_preset_versions(self: Self, preset_name: str) -> Any: ...
    def load_preset_version(self: Self, preset_name: str, version_filename: str) -> Any: ...
    def delete_preset_version(self: Self, preset_name: str, version_filename: str) -> Any: ...
    def get_variables(self: Self) -> Any: ...
    def update_variable(self: Self, name: Any, value: Any, is_secret: Any, is_enabled: Any, mode: Any) -> Any: ...
    def update_variable_state(self: Self, name: str, is_enabled: bool) -> Any: ...
    def delete_variable(self: Self, name: Any) -> Any: ...
    def get_components(self: Self, component_type: str, component_id: str) -> Any: ...
    def install_component(self: Self, component_type: str, zip_filepath: str) -> Any: ...
    def delete_component(self: Self, component_type: str, component_id: str) -> Any: ...
    def update_component_state(self: Self, component_type: str, component_id: str, is_paused: bool) -> Any: ...
    def get_dashboard_layout(self: Self, tab_id: str) -> Any: ...
    def save_dashboard_layout(self: Self, tab_id: str, layout_data: dict) -> Any: ...
    def get_tab_session(self: Self) -> Any: ...
    def save_tab_session(self: Self, tabs_data: list) -> Any: ...
    def open_managed_tab(self: Self, tab_key: str) -> Any: ...
    def upload_component(self: Self, comp_type: str, component_id: str, description: str, tier: str) -> Any: ...
    def upload_model(self: Self, model_path: str, description: str, tier: str) -> Any: ...
    def get_prompts(self: Self) -> Any: ...
    def get_prompt(self: Self, prompt_id: str) -> Any: ...
    def create_prompt(self: Self, prompt_data: dict) -> Any: ...
    def update_prompt(self: Self, prompt_id: str, prompt_data: dict) -> Any: ...
    def delete_prompt(self: Self, prompt_id: str) -> Any: ...
    def delete_dataset(self: Self, name: str) -> Any: ...
    def get_trigger_rules(self: Self) -> Any: ...
    def get_trigger_definitions(self: Self) -> Any: ...
    def create_trigger_rule(self: Self, rule_data: dict) -> Any: ...
    def update_trigger_rule(self: Self, rule_id: str, rule_data: dict) -> Any: ...
    def delete_trigger_rule(self: Self, rule_id: str) -> Any: ...
    def reload_triggers(self: Self) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import requests
import json
import os
import threading
import time
import random
import flowork_kernel
import flowork_kernel.kernel