# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from authentication_dialog import AuthenticationDialog
from flowork_kernel.api_client import ApiClient
from flowork_kernel.exceptions import PermissionDeniedError
from flowork_kernel.ui_shell.custom_widgets.draggable_notebook import DraggableNotebook
from flowork_kernel.ui_shell.workflow_editor_tab import WorkflowEditorTab
from lifecycle.AppLifecycleHandler import AppLifecycleHandler
from popups.PopupManager import PopupManager
from tkinter import Button, Label, Menu, Toplevel, filedialog, messagebox, ttk
from typing import Any
from typing_extensions import Self
from ui_components.menubar_manager import MenubarManager
import datetime
import json
import logging
import os
import shutil
import threading
import time
import ttkbootstrap
import uuid
import webbrowser

class MainWindow:
    def __init__(self: Self, kernel_instance: Any) -> None: ...
    def _open_authentication_dialog(self: Self) -> Any: ...
    def _on_user_login(self: Self, event_data: Any) -> Any: ...
    def _on_user_logout(self: Self, event_data: Any) -> Any: ...
    def handle_license_activation_request(self: Self) -> Any: ...
    def handle_license_deactivation_request(self: Self) -> Any: ...
    def _deactivate_worker(self: Self) -> Any: ...
    def _on_deactivate_complete(self: Self, success: Any, message: Any) -> Any: ...
    def _create_status_bar(self: Self) -> Any: ...
    def _on_start_record_click(self: Self) -> Any: ...
    def _on_stop_record_click(self: Self) -> Any: ...
    def _update_record_timer(self: Self) -> Any: ...
    def _update_button_states(self: Self) -> Any: ...
    def _subscribe_to_events(self: Self) -> Any: ...
    def _on_ai_analysis_started(self: Self, event_data: Any) -> Any: ...
    def _on_ai_analysis_progress(self: Self, event_data: Any) -> Any: ...
    def _on_ai_analysis_finished(self: Self, event_data: Any) -> Any: ...
    def add_notification(self: Self, title: str, message: str, level: str) -> Any: ...
    def refresh_ui_components(self: Self) -> Any: ...
    def apply_theme(self: Self, theme_id: Any) -> Any: ...
    def apply_manual_styles(self: Self) -> Any: ...
    def create_widgets(self: Self) -> Any: ...
    def _confirm_and_save_session(self: Self) -> Any: ...
    def _clear_cache_action(self: Self) -> Any: ...
    def add_dynamic_menu_item(self: Self, parent_menu_label: Any, item_label: Any, item_command: Any) -> Any: ...
    def _trigger_workflow_action(self: Self, action_name: Any) -> Any: ...
    def clear_active_dashboard(self: Self) -> Any: ...
    def save_layout_and_session(self: Self) -> Any: ...
    def _open_managed_tab(self: Self, tab_key: Any) -> Any: ...
    def _show_about_dialog(self: Self) -> Any: ...
    def _run_online_activation(self: Self, full_license_content: Any) -> Any: ...
    def _show_activation_result(self: Self, success: Any, message: Any) -> Any: ...
    def show_permission_denied_popup(self: Self, message: str) -> Any: ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import ttkbootstrap
import tkinter
import tkinter.ttk
import tkinter.Menu
import tkinter.messagebox
import tkinter.Toplevel
import tkinter.Label
import tkinter.Button
import tkinter.filedialog
import uuid
import logging
import datetime
import shutil
import os
import json
import threading
import time
import flowork_kernel
import flowork_kernel.ui_shell
import flowork_kernel.ui_shell.custom_widgets
import flowork_kernel.ui_shell.custom_widgets.draggable_notebook
import flowork_kernel.ui_shell.workflow_editor_tab
import webbrowser
import flowork_kernel.exceptions
import flowork_kernel.api_client